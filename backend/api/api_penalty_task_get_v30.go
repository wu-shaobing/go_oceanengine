/*
Oceanengine Open Api

巨量引擎开放平台 Open Api


*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"net/url"

	"github.com/oceanengine/ad_open_sdk_go/config"
	. "github.com/oceanengine/ad_open_sdk_go/models"
)

// PenaltyTaskGetV30ApiService PenaltyTaskGetV30Api service
type PenaltyTaskGetV30ApiService service

type ApiOpenApiV30PenaltyTaskGetGetRequest struct {
	ctx               context.Context
	ApiService        *PenaltyTaskGetV30ApiService
	advertiserIds     *[]int64
	customerIds       *[]int64
	disposalStartTime *string
	disposalEndTime   *string
	page              *int64
	pageSize          *int64
}

// 广告主id
func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) AdvertiserIds(advertiserIds []int64) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.advertiserIds = &advertiserIds
	return r
}

// 客户id
func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) CustomerIds(customerIds []int64) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.customerIds = &customerIds
	return r
}

// 封停开始时间（例：2025-09-24 16:18:46）
func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) DisposalStartTime(disposalStartTime string) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.disposalStartTime = &disposalStartTime
	return r
}

// 封停结束时间（例：2030-12-31 23:59:59）
func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) DisposalEndTime(disposalEndTime string) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.disposalEndTime = &disposalEndTime
	return r
}

// 当前页码，默认为 1
func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) Page(page int64) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.page = &page
	return r
}

// 页面大小
func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) PageSize(pageSize int64) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) Execute() (*PenaltyTaskGetV30Response, *http.Response, error) {
	return r.ApiService.getExecute(r)
}

func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) AccessToken(accessToken string) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	r.ctx = context.WithValue(r.ctx, config.ContextAccessToken, accessToken)
	return r
}

func (r *ApiOpenApiV30PenaltyTaskGetGetRequest) WithLog(enable bool) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	if enable {
		r.ctx = context.WithValue(r.ctx, config.ContextEnableLog, true)
	}
	return r
}

/*
OpenApiV30PenaltyTaskGetGet Method for OpenApiV30PenaltyTaskGetGet

查询客户扣罚单

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenApiV30PenaltyTaskGetGetRequest
*/
func (a *PenaltyTaskGetV30ApiService) Get(ctx context.Context) *ApiOpenApiV30PenaltyTaskGetGetRequest {
	return &ApiOpenApiV30PenaltyTaskGetGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PenaltyTaskGetV30Response
func (a *PenaltyTaskGetV30ApiService) getExecute(r *ApiOpenApiV30PenaltyTaskGetGetRequest) (*PenaltyTaskGetV30Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           map[string]*FormFileInfo
		localVarReturnValue *PenaltyTaskGetV30Response
	)

	r.ctx = a.client.prepareCtx(r.ctx)

	localBasePath := a.client.Cfg.GetBasePath()

	localVarPath := localBasePath + "/open_api/v3.0/penalty_task/get/"

	localVarHeaderParams := make(map[string]string)
	formFiles = make(map[string]*FormFileInfo)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.advertiserIds == nil {
		return localVarReturnValue, nil, ReportError("advertiserIds is required and must be specified")
	}
	if len(*r.advertiserIds) < 1 {
		return localVarReturnValue, nil, ReportError("advertiserIds must have at least 1 elements")
	}
	if len(*r.advertiserIds) > 20 {
		return localVarReturnValue, nil, ReportError("advertiserIds must have less than 20 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "advertiser_ids", r.advertiserIds)
	if r.customerIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customer_ids", r.customerIds)
	}
	if r.disposalStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disposal_start_time", r.disposalStartTime)
	}
	if r.disposalEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "disposal_end_time", r.disposalEndTime)
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page)
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize)
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.call(r.ctx, req, &localVarReturnValue)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	return localVarReturnValue, localVarHTTPResponse, nil
}
